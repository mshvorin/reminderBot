name: Build, Deploy to AWS ECS

on:
  push:
    branches:
      - main  # Triggers the workflow on pushes to the main branch

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Set up Python (if your project uses Python)
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'  # Specify your Python version

      # 3. Cache pip dependencies (optional but recommended)
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4. Install dependencies (if your project uses Python)
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      # 5. Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 6. Log in to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 7. Build, tag, and push Docker image to ECR
      - name: Build, tag, and push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # 8. Install jq
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # 9. Prepare ecs-task-def.json with secrets using jq
      - name: Prepare ecs-task-def.json with secrets
        run: |
          cp ecs-task-def.json ecs-task-def-temp.json
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}"
          jq --arg image "$IMAGE_URI" \
             --arg disc_token "${{ secrets.DISCORD_TOKEN }}" \
             --arg openai_token "${{ secrets.OPENAI }}" \
             --arg mongo_pass "${{ secrets.MONGOPASS }}" \
             '
             .containerDefinitions[0].image = $image |
             (.containerDefinitions[0].secrets[] | select(.name == "DISCORD_TOKEN").valueFrom) = $disc_token |
             (.containerDefinitions[0].secrets[] | select(.name == "OPENAI").valueFrom) = $openai_token |
             (.containerDefinitions[0].secrets[] | select(.name == "MONGOPASS").valueFrom) = $mongo_pass
             ' ecs-task-def-temp.json > ecs-task-def-updated.json
          mv ecs-task-def-updated.json ecs-task-def-temp.json
      

      # 10. Register and deploy ECS Task Definition
      - name: Register and deploy ECS Task Definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ecs-task-def-temp.json  # Use the temporary file
          service: ${{ secrets.SERVICE }}
          cluster: ${{ secrets.CLUSTER }}
          wait-for-service-stability: true